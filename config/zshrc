#!/usr/bin/env zsh
# vim: ft=sh

# mac, archlinux or al2023
os_alias() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "mac"
  elif [[ -f /etc/os-release ]]; then
    local os_id=$(grep ^ID= /etc/os-release | cut -d'=' -f2 | tr -d '"')
    if [[ "$os_id" == "arch" ]]; then
      echo "archlinux"
    elif [[ "$os_id" == "amzn" ]]; then
      echo "al2023"
    fi
  fi
}

syntax_highlighting_theme() {
  # Catppuccin Mocha Theme (for zsh-syntax-highlighting)
  #
  # Paste this files contents inside your ~/.zshrc before you activate zsh-syntax-highlighting
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main cursor)
  typeset -gA ZSH_HIGHLIGHT_STYLES

  # Main highlighter styling: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md
  #
  ## General
  ### Diffs
  ### Markup
  ## Classes
  ## Comments
  ZSH_HIGHLIGHT_STYLES[comment]='fg=#585b70'
  ## Constants
  ## Entitites
  ## Functions/methods
  ZSH_HIGHLIGHT_STYLES[alias]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES["uffix-alias"]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES["global-alias"]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES[function]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES[command]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES[precommand]='fg=#a6e3a1,italic'
  ZSH_HIGHLIGHT_STYLES[autodirectory]='fg=#fab387,italic'
  ZSH_HIGHLIGHT_STYLES["single-hyphen-option"]='fg=#fab387'
  ZSH_HIGHLIGHT_STYLES["double-hyphen-option"]='fg=#fab387'
  ZSH_HIGHLIGHT_STYLES["back-quoted-argument"]='fg=#cba6f7'
  ## Keywords
  ## Built ins
  ZSH_HIGHLIGHT_STYLES[builtin]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES["reserved-word"]='fg=#a6e3a1'
  ZSH_HIGHLIGHT_STYLES["hashed-command"]='fg=#a6e3a1'
  ## Punctuation
  ZSH_HIGHLIGHT_STYLES[commandseparator]='fg=#f38ba8'
  ZSH_HIGHLIGHT_STYLES["command-substitution-delimiter"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["command-substitution-delimiter-unquoted"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["process-substitution-delimiter"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["back-quoted-argument-delimiter"]='fg=#f38ba8'
  ZSH_HIGHLIGHT_STYLES["back-double-quoted-argument"]='fg=#f38ba8'
  ZSH_HIGHLIGHT_STYLES["back-dollar-quoted-argument"]='fg=#f38ba8'
  ## Serializable / Configuration Languages
  ## Storage
  ## Strings
  ZSH_HIGHLIGHT_STYLES["command-substitution-quoted"]='fg=#f9e2af'
  ZSH_HIGHLIGHT_STYLES["command-substitution-delimiter-quoted"]='fg=#f9e2af'
  ZSH_HIGHLIGHT_STYLES["single-quoted-argument"]='fg=#f9e2af'
  ZSH_HIGHLIGHT_STYLES["single-quoted-argument-unclosed"]='fg=#eba0ac'
  ZSH_HIGHLIGHT_STYLES["double-quoted-argument"]='fg=#f9e2af'
  ZSH_HIGHLIGHT_STYLES["double-quoted-argument-unclosed"]='fg=#eba0ac'
  ZSH_HIGHLIGHT_STYLES["rc-quote"]='fg=#f9e2af'
  ## Variables
  ZSH_HIGHLIGHT_STYLES["dollar-quoted-argument"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["dollar-quoted-argument-unclosed"]='fg=#eba0ac'
  ZSH_HIGHLIGHT_STYLES["dollar-double-quoted-argument"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES[assign]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["named-fd"]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["numeric-fd"]='fg=#cdd6f4'
  ## No category relevant in spec
  ZSH_HIGHLIGHT_STYLES["unknown-token"]='fg=#eba0ac'
  ZSH_HIGHLIGHT_STYLES[path]='fg=#cdd6f4,underline'
  ZSH_HIGHLIGHT_STYLES[path_pathseparator]='fg=#f38ba8,underline'
  ZSH_HIGHLIGHT_STYLES[path_prefix]='fg=#cdd6f4,underline'
  ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]='fg=#f38ba8,underline'
  ZSH_HIGHLIGHT_STYLES[globbing]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES["history-expansion"]='fg=#cba6f7'
  #ZSH_HIGHLIGHT_STYLES["command-substitution"]='fg=?'
  #ZSH_HIGHLIGHT_STYLES["command-substitution-unquoted"]='fg=?'
  #ZSH_HIGHLIGHT_STYLES["process-substitution"]='fg=?'
  #ZSH_HIGHLIGHT_STYLES["arithmetic-expansion"]='fg=?'
  ZSH_HIGHLIGHT_STYLES["back-quoted-argument-unclosed"]='fg=#eba0ac'
  ZSH_HIGHLIGHT_STYLES[redirection]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES[arg0]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES[default]='fg=#cdd6f4'
  ZSH_HIGHLIGHT_STYLES[cursor]='fg=#cdd6f4'
}

os_alias=$(os_alias)

setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
setopt prompt_subst
setopt AUTO_CD

export HISTORY_TIME_FORMAT="%Y-%m-%d %T "
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=9999
export SAVEHIST=9999

export EDITOR=nvim
export VISUAL=nvim

export LG_CONFIG_FILE=$HOME/.config/lazygit/config.yaml
export STARSHIP_CONFIG=$HOME/.config/starship/starship.toml
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"

export FZF_DEFAULT_OPTS=" \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--color=selected-bg:#45475a \
--height=45% \
--reverse \
--prompt 'î©­ '"
# --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
  # --tmux \
  # --multi"

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin:$GOPATH/bin/bin:$HOME/.local/bin:$HOME/bin
# nvim_mason=$HOME/.local/share/nvim/mason/bin
# export PATH=$nvim_mason:$PATH
# unset nvim_mason
if [[ "$os_alias" == "mac" ]]; then
  export PATH=$PATH:/opt/homebrew/opt/libpq/bin
elif [[ "$os_alias" == "al2023" ]]; then
  export PATH=$PATH:/home/linuxbrew/.linuxbrew/opt/libpq/bin
fi

if [[ "$os_alias" == "mac" || "$os_alias" == "al2023" ]]; then
  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_NO_AUTO_UPDATE=1

  if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -d /home/linuxbrew/.linuxbrew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi

  source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  syntax_highlighting_theme
  source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  export NVM_DIR="$HOME/.nvm"
  [ -d "$NVM_DIR" ] || {
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR" &&
    (
      cd "$NVM_DIR" &&
      git checkout "$(git describe --abbrev=0 --tags --match 'v[0-9]*' $(git rev-list --tags --max-count=1))"
    )
  }
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
elif [[ "$os_alias" == "archlinux" ]]; then
  export MOZ_ENABLE_WAYLAND=1
  export SUDO_ASKPASS=$HOME/.config/rofi/askpass.sh

  source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
  if [[ -n "$WAYLAND_DISPLAY" || -n "$DISPLAY" ]]; then
    syntax_highlighting_theme
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  fi

  source /usr/share/nvm/init-nvm.sh
fi

# auto completion and suggestions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=*' 'r:|=* m:{a-z\-}={A-Z\_}'
zstyle ':completion:*' list-dirs-first true

autoload -U +X bashcompinit && bashcompinit
autoload -Uz compinit
compinit -u

if [[ "$os_alias" == "archlinux" ]]; then
  [[ -n "$WAYLAND_DISPLAY" || -n "$DISPLAY" ]] && eval "$(starship init zsh)"
else
  eval "$(starship init zsh)"
fi

eval "$(zoxide init --cmd cd zsh)"

complete -C "$(which aws_completer)" aws
complete -o nospace -C "$(which terraform)" terraform

source <(fzf --zsh)
source <(gh completion -s zsh)

if command -v op &>/dev/null; then
  eval "$(op completion zsh)"
  compdef _op op
fi

if command -v tbx &>/dev/null; then
  source <(tbx completion zsh)
fi

if command -v kubectl &>/dev/null; then
  source <(kubectl completion zsh)
fi

alias .....='cd ../../../..'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias b=bat
alias bg=' bg'
alias c=clear
alias clear=' clear'
alias cp='cp -i'
alias exit=' exit'
alias fg=' fg'
alias grep='grep --color=auto'
alias hist='history -E'
alias k=kubectl
alias lazydocker=' CONFIG_DIR=~/.config/lazydocker lazydocker'
alias lazygit=' lazygit'
alias lg=lazygit
alias ll='eza -l --group-directories-first --git --git-repos --icons --ignore-glob ".DS_Store"'
alias lla='ll -A'
alias ls='ls --color=auto'
alias lt='eza -l --group-directories-first --ignore-glob ".git|.DS_Store" -aTL'
alias lzd=lazydocker
alias mv='mv -i'
alias pwd=' pwd'
alias rm='rm -i'
alias sel-awsprofile="grep -E '^\[.+\]$' ~/.aws/credentials | sed -E 's/^\[(.+)\]$/\1/' | sort -u | fzf"
alias tf=terraform
alias v=nvim

if [[ "$os_alias" == "mac" ]]; then
  alias cp-awsprofile="sel-awsprofile | tr -d '\n' | pbcopy"
elif [[ "$os_alias" == "archlinux" ]]; then
  alias cp-awsprofile="sel-awsprofile | tr -d '\n' | wl-copy"
  alias ch="cliphist list | fzf --no-sort -d $'\t' --with-nth 2 | cliphist decode | wl-copy"
fi

xx() {
  local base_dir="$HOME/bin"
  local b=$(fd -t x -d 3 -H -I --base-directory "$base_dir" | fzf)
  [[ -n "$b" ]] && "$base_dir/$b"
}

ff() {
  local dir=$(fd -t d -d 6 -H -E node_modules -E '.git' -E '.terraform' | fzf)
  [[ -n "$dir" ]] && cd "$dir"
}

gg() {
  local base_dir="$HOME/codebox"
  local dir=$(fd -t d -d 3 -H -E node_modules -E '.git' -E '.terraform' --base-directory $base_dir --min-depth 2 | fzf)
  [[ -n "$dir" ]] && cd "$base_dir/$dir"
}

[[ -f "$HOME/.customrc.sh" ]] && source $HOME/.customrc.sh
