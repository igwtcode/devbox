#!/usr/bin/env bash
# vim: ft=sh

# If not running interactively, don't do anything
# [[ $- != *i* ]] && return

# mac, archlinux or al2023
os_alias() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "mac"
  elif [[ -f /etc/os-release ]]; then
    local os_id=$(grep ^ID= /etc/os-release | cut -d'=' -f2 | tr -d '"')
    if [[ "$os_id" == "arch" ]]; then
      echo "archlinux"
    elif [[ "$os_id" == "amzn" ]]; then
      echo "al2023"
    fi
  fi
}

os_alias=$(os_alias)

export EDITOR=nvim
export VISUAL=nvim

export LG_CONFIG_FILE=$HOME/.config/lazygit/config.yaml
export STARSHIP_CONFIG=$HOME/.config/starship/starship.toml
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"

export FZF_DEFAULT_OPTS=" \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--color=selected-bg:#45475a \
--height=45% \
--reverse \
--prompt 'î©­ '"
# --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
# --tmux \
# --multi"

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin:$GOPATH/bin/bin:$HOME/.local/bin:$HOME/bin
# nvim_mason=$HOME/.local/share/nvim/mason/bin
# export PATH=$nvim_mason:$PATH
# unset nvim_mason
if [[ "$os_alias" == "mac" ]]; then
  export PATH=$PATH:/opt/homebrew/opt/libpq/bin
elif [[ "$os_alias" == "al2023" ]]; then
  export PATH=$PATH:/home/linuxbrew/.linuxbrew/opt/libpq/bin
fi

if [[ "$os_alias" == "mac" || "$os_alias" == "al2023" ]]; then
  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_NO_AUTO_UPDATE=1

  if [[ -d /opt/homebrew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -d /home/linuxbrew/.linuxbrew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi

  export NVM_DIR="$HOME/.nvm"
  [ -d "$NVM_DIR" ] || {
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR" &&
      (
        cd "$NVM_DIR" &&
          git checkout "$(git describe --abbrev=0 --tags --match 'v[0-9]*' $(git rev-list --tags --max-count=1))"
      )
  }
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
elif [[ "$os_alias" == "archlinux" ]]; then
  export MOZ_ENABLE_WAYLAND=1
  export SUDO_ASKPASS=$HOME/.config/rofi/askpass.sh

  source /usr/share/nvm/init-nvm.sh
fi

if [[ "$os_alias" == "archlinux" ]]; then
  [[ -n "$WAYLAND_DISPLAY" || -n "$DISPLAY" ]] && eval "$(starship init bash)"
else
  eval "$(starship init bash)"
fi

eval "$(zoxide init --cmd cd bash)"

complete -C "$(which aws_completer)" aws
complete -C "$(which terraform)" terraform

source <(fzf --bash)
source <(gh completion -s bash)

if command -v op &>/dev/null; then
  source <(op completion bash)
fi

if command -v kubectl &>/dev/null; then
  source <(kubectl completion bash)
fi

if command -v tbx &>/dev/null; then
  source <(tbx completion bash)
fi

alias .....='cd ../../../..'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias b=bat
alias bg=' bg'
alias c=clear
alias clear=' clear'
alias cp-awsprofile="sel-awsprofile | tr -d '\n' | wl-copy"
alias cp='cp -i'
alias exit=' exit'
alias fg=' fg'
alias grep='grep --color=auto'
alias k=kubectl
alias lazydocker=' CONFIG_DIR=~/.config/lazydocker lazydocker'
alias lazygit=' lazygit'
alias lg=lazygit
alias ll='eza -l --group-directories-first --git --git-repos --icons --ignore-glob ".DS_Store"'
alias lla='ll -A'
alias ls='ls --color=auto'
alias lt='eza -l --group-directories-first --ignore-glob ".git|.DS_Store" -aTL'
alias lzd=lazydocker
alias mv='mv -i'
alias pwd=' pwd'
alias rm='rm -i'
alias sel-awsprofile="grep -E '^\[.+\]$' ~/.aws/credentials | sed -E 's/^\[(.+)\]$/\1/' | sort -u | fzf"
alias tf=terraform
alias v=nvim

if [[ "$os_alias" == "mac" ]]; then
  alias cp-awsprofile="sel-awsprofile | tr -d '\n' | pbcopy"
elif [[ "$os_alias" == "archlinux" ]]; then
  alias cp-awsprofile="sel-awsprofile | tr -d '\n' | wl-copy"
  alias ch="cliphist list | fzf --no-sort -d $'\t' --with-nth 2 | cliphist decode | wl-copy"
fi

rbin() {
  find "$(readlink -f $HOME/bin)" -maxdepth 1 -type f -perm -u+x | while read -r file; do
    echo -e "$(basename "$file")\t$file"
  done | fzf --with-nth=1 --delimiter="\t" | awk -F'\t' '{print $2}' | xargs -r bash
}

fcd() {
  local dir=$(find . -maxdepth 1 -type d -not -path . | sed 's|^\./||' | fzf)
  [[ -n "$dir" ]] && cd "$dir"
}

[[ -f "$HOME/.customrc.sh" ]] && source $HOME/.customrc.sh
